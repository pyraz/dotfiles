"========== General ==========
set expandtab                   " Use soft tabs
set tabstop=2                   " Tab settings
set autoindent
set smarttab                    " Use shiftwidth to tab at line beginning
set shiftwidth=2                " Width of autoindent
set number                      " Line numbers
set nowrap                      " No wrapping
set backspace=indent,eol,start  " Let backspace work over anything.
set showmatch                   " Show matching brackets/braces
set autoread                    " Don't prompt when a file is changed outside of vim
set smartcase                   " Smart case-sensitive searching
set clipboard=unnamed           " Integrate with OSX clipboard

" Only modify the statusline if not if vimdiff
if !&diff
  " More detailed statusline
  set statusline=[%n]\ %f\ %m\ %y
  set statusline+=%{fugitive#statusline()} " Show git details"
  set statusline+=%w              " [Preview]
  set statusline+=%=              " Left/right separator
  set statusline+=%c,             " Cursor column
  set statusline+=%l/%L           " Cursor line/total lines
  set statusline+=\ %P            " Percent through file
  " Syntastic statusline info
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
endif

" Spell checking
set spelllang=en_us
nmap <silent> <leader>sp :set spell!<CR>
map <Leader>z :'<,'>sort<CR>

" UTF-8 all the way
set encoding=utf-8

"========== Directories ==========
set directory=~/.vim-tmp,~/tmp,/var/tmp,/tmp
set backupdir=~/.vim-tmp,~/tmp,/var/tmp,/tmp

"========== Keybindings ==========
imap jj <Esc>

" ========== Dash =================
nmap <silent> <leader>d <Plug>DashSearch

"========== NERDtree ==========
map \           :NERDTreeToggle<CR>
map \|          :NERDTreeFind<CR>
" automatically close NERDTree when a file is opened
let NERDTreeQuitOnOpen = 1
" Small default width for NERDTree pane
let g:NERDTreeWinSize = 40
" Change working directory if you change root directories
let g:NERDTreeChDirMode=2

"========== Folding ==========
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

"========== vim-fugitivie ==========
map <leader>g   :Gblame<CR>
" clean up unused fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
autocmd BufReadPost .git/index set nolist

" surround.vim: Add $ as a jQuery surround, _ for Underscore.js
autocmd FileType javascript let b:surround_36 = "$(\r)"
                         \ | let b:surround_95 = "_(\r)""

"========== CtrlP =========
map <leader>p :CtrlPTag<CR>

"========== Supertab ==========
let g:SuperTabDefaultCompletionType = "context"


let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 2
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_signs=1
let g:syntastic_loc_list_height=5

" ========== vim-auto-save ==========
let g:auto_save = 0

" Only enable auto saving if under version control
let s:in_git = system('git rev-parse --is-inside-work-tree')
if s:in_git =~ 'true'
  let g:auto_save = 1
endif

" Rename tabs to show tab number.
" (Based on http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')

            let s .= '%#TabNum#'
            let s .= i
            " let s .= '%*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= ' ' . file . ' '
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
    set showtabline=1
    highlight link TabNum Special
endif

"========== Quicker window movement ==========
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

"============ Auto completion ============
set completeopt=menuone,menu,longest
set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git,.cabal-sandbox
set wildmode=longest,list,full
set wildmenu
set completeopt+=longest

"=========== SuperTab ==============
let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

if has("gui_running")
  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
else " no gui
  if has("unix")
    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
  endif
endif

"========== Solarized Light ==========
set background=light
colorscheme solarized

"========= Tabular ===============
nmap <Leader>n= :Tabularize /=<CR>
vmap <Leader>n= :Tabularize /=<CR>
nmap <Leader>n: :Tabularize /:\zs<CR>
vmap <Leader>n: :Tabularize /:\zs<CR>
